---
layout: post
title: "回归分析总结"
date: 2016-11-18
author: Dykin
category: Machine Learning  我蛮喜欢写论文的哎，你要是以后想合作发ACM或者你老师想发ACM或者ＩＥＥＥ可以合作一下，我申请了美国阿肯色大学，世界五百强之首的沃尔玛在我们这里，所以商业数据分析处理这块还是挺有优势的
---

回归分析是一种很重要的预测建模技术。主要是研究自变量与因变量之间的因果关系。本文将会从数学角度与代码角度分析不同类型的回归。当你想预测连续型的非独立变量，或者对一系列独立变量或输入项有所反应时，就会使用到回归分析。如果非独立变量是二分的，那么我们将会使用到逻辑回归。

对于回归技术的分类，在这里我不想过多细分，但是一般回归会依赖于三个方面进行区分：
+自变量数目
+回归函数曲线的形状
+因变量的类型

首先我们来了解下面几种常用的回归算法模型

### 简单线性回归（Simple Linear Regression）

简单线性回归是最基础的一种回归模型，自变量只有一个，函数曲线为直线，因变量为连续型，自变量可以是连续的或者是离散的。函数表示如下：

其中 y 是因变量， x是自变量， β0 和 β1 属于起始值和系数，ε 为偏移量，为了使得到的函数模型更加准确，最后会加上偏移量。

![figure 1](/images/reg/1.PNG)

线性回归一般使用最小二乘法来求解函数模型级求解 β0 和 β1 。 方法如下：[最小二乘法](https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95)

![figure 2](/images/reg/2.PNG)


如图中四个点为数据（x,y）:（1,6）（2,5）（3,7）（4,10）。我们需要根据红色的数据来求蓝色的曲线。目前我们已知这四个点匹配直线y= β1 + β2x 。所以我们要找到符合这条直线的最佳情况，即最合适的β0 和 β1。

![figure 3](/images/reg/3.PNG)

最小二乘法就是尽量取两边方差的最小值，这样可以找到最拟合的曲线。

![figure 4](/images/reg/4.PNG)

然后我们我们同时对β0和β1求其偏导数

![figure 5](/images/reg/5.PNG)

这样我们很容易就解除方程组的解

![figure 6](/images/reg/6.PNG)

所以我们就得到了直线 y=3.5 + 1.4x

用Python和Java代码表示如下：

```python


```

```java

```

多元线性回归类似于简单线性回归，只不过自变量不止一个，但是过程和方法与简单线性回归一样。这里我只把代码放出来。

```python


```

```java

```

### 多项式回归（Polynomial Regression）

如果一个方程，自变量的指数大于1，那么所有拟合这个方程的点就符合多项式回归。

![figure 1.8](/images/ML1/8.PNG)

多项式回归有个很重要的因素就是指数（degree）。如果我们发现数据的分布大致是一条曲线，那么很可能符合多项式回归，但是我们不知道degree是多少。所以我们只能一个个去试，直到找到最拟合分布的degree。这个过程我们可以交给数据科学软件完成。需要注意的是，如果degree选择过大的话可能会导致函数过于拟合， 意味着对数据或者函数未来的发展很难预测，也许指向不同的方向。

Java 和 Python 代码如下：

```python


```

```java

```





### 逻辑回归（Logistic Regression）

逻辑回归是我最喜欢的一种回归，因为表达的是概率事件。


### Probit model















### 逐步回归（Stepwise Regression）

### 岭回归（Ridge Regression）

### 套索回归（Lasso Regression）

### 弹性网（Elastic net）





本文参考了Sunil Ray的[7 Types of Regression Techniques you should know!](https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/)
