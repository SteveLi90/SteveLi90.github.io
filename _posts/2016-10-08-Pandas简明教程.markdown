---
layout: post
title: "Pandas简明教程"
subtitle: "Pandas 简明教程"
date: 2016-10-08
author: Dykin
category: Data Science
tags: Data Python Machine_Learning
finished: true
---
#              Pandas简明教程
Pandas 是一个很强大的数据科学分析工具，你可以把它当做是Excel。它是NumPy的延伸库。如果结合NumPy使用，基本上可以解决大多数据问题。
我将从下面几个方面来介绍Pandas的一些常用功能和函数：

* Series  级数
* DataFrames   数据框
* Missing Data  空值（无效值）
* GroupBy   分组
* Merging, Joining,and Concatenating  归并
* Operations   运算操作0
* Data Input and Output   数据输入输出

注：

*1，我最开始是用英语学习计算机的，所以有些英文的专业词汇我不知道怎么翻译更准确，本文中将保留这些专业名词。*
*2， Pandas和R语言的一些功能其实很像。但是作为计算机人员我更愿意用Python将程序与数据分析结合起来。以后有时间的话我会写一个R语言的教程并且写一个R与Python功能比较的参考。*

# Series
Series 很像 NumPy中的Array。两者的区别是： Series会有一个一个axis labels（维度标签），这个axis labels不仅仅是数字，Series可以用这个作为索引。而array的只能用实数表示位置。另外Series中的数据可以是任何类型的object，但是array中只能是数字（[NumPy1.1版本数据类型](http://docs.scipy.org/doc/numpy/user/basics.types.html)）。从这个功能上看，Series有点像是Hash table。

让我们来看几个例子先：
```python
import numpy as np
import pandas as pd
```

### 创建一个 Series

你可以将 list,numpy array, 或者 dictionary 转换成 Series:


```python
labels = ['a','b','c']   #list
my_list = [10,20,30]    #list
arr = np.array([10,20,30])   # numpy array
d = {'a':10,'b':20,'c':30}   # dictionary
```

#### 用 Lists


```python
pd.Series(data=my_list)
```

    0    10
    1    20
    2    30
    dtype: int64


```python
pd.Series(data=my_list,index=labels)   # Series主要的两个参数data在前，index在后
```
output：
    a    10
    b    20
    c    30
    dtype: int64


```python
pd.Series(my_list,labels)  # 在正式项目中最好指明哪个变量指向哪个参数
```
以后我还要介绍更多数据科学工具，有些功能与NumPy或者pandas相似，但是更专业，出来的效果对business更有帮助。所以在对代码格式和报告要求不严格的项目中可以随意一些，但是严谨的business项目中最好要对格式有所要求。

    a    10
    b    20
    c    30
    dtype: int64

#### NumPy Arrays

```python
pd.Series(arr)  # axis labels 默认为有理实数
```
output：
    0    10
    1    20
    2    30
    dtype: int64

```python
pd.Series(arr,labels)
```
output：
    a    10
    b    20
    c    30
    dtype: int64

Dictionary

```python
pd.Series(d)
```
output：
    a    10
    b    20
    c    30
    dtype: int64

### Series里的数据类型
pandas Series 可以存放很多种数据类型：

```python
pd.Series(data=labels)
```
output：
    0    a
    1    b
    2    c
    dtype: object

```python
# 甚至函数
pd.Series([sum,print,len])
```

    0      <built-in function sum>
    1    <built-in function print>  # 必须加 from __future__ import print_function 在代码前，原因参考下面列表
    2      <built-in function len>
    dtype: object

[所有的build-in函数列表](https://docs.python.org/3/library/functions.html)

## 使用Index

使用Series的关键在于使用index，Series包含两个关键参数：data和index，可见index的地位与data同等重要。学会使用index可以更快查找数据。
下面几个例子将练习如何在Series中使用index，首先我们创建两个Series： ser1 & ser2

```python
ser1 = pd.Series([1,2,3,4],index = ['USA', 'Germany','USSR', 'Japan'])                                   
```
```python
ser1
```
output:
    USA        1
    Germany    2
    USSR       3
    Japan      4
    dtype: int64
```python
ser2 = pd.Series([1,2,5,4],index = ['USA', 'Germany','Italy', 'Japan'])                                   
```
```python
ser2
```
output:
    USA        1
    Germany    2
    Italy      5
    Japan      4
    dtype: int64
```python
ser1['USA']
```
output:
    1

算数运算也会基于index进行

```python
ser1 + ser2
```
output：
    Germany    4.0
    Italy      NaN
    Japan      8.0
    USA        2.0
    USSR       NaN
    dtype: float64  # 一旦进行算数运算结果自动转换为float.并且结果根据index将序排列

简单介绍一下，如果想向Series中增加数据，一般用set_value.后面的参数需要跟index和data。append和add方法只能加入另外一个一个Series。

```python
ser2.set_value('Canada',7)
```
output:
    USA        1
    Germany    2
    Italy      5
    Japan      4
    china      6
    Canada     7
    dtype: int64

```python
ser1 + ser2
```
output:
    Canada     NaN
    China      NaN
    Germany    4.0
    Italy      NaN
    Japan      8.0
    USA        2.0
    USSR       NaN
    dtype: float64
    # 只有两个Series中共有的index相加才有有结果，否则得到NaN值。

# DataFrames

DataFrames 的重要性不言而喻，受R语言的启发而开发出来的。 DataFrame就是许多object分享同一个index。在我学习R的时候很难理解DataFrame的意义。简单点来说你可以把它当做Excel里的一个sheet，或者数据库里的一个表。
让我们来看几个例子

```python
import pandas as pd
import numpy as np
```
```python
from numpy.random import randn
np.random.seed(101)  # seed 相当于reset。 因为随机数每次会取一个数作为seed，然后对这个数进行运算，通过算法得到一系列随机数，如果seed定了，那么得到的随机数是可以预测的。所以我们每次可以重置seed。
```
```python
df = pd.DataFrame(randn(5,4),index='A B C D E'.split(),columns='W X Y Z'.split())

df
```
output：
|      | W         | X         | Y         | Z         |
| ---- | :-------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  |

## Selection and Indexing

从DataFrame中选取数据

```python
df['W']
```
output：
    A    2.706850
    B    0.651118
    C   -2.018168
    D    0.188695
    E    0.190794
    Name: W, dtype: float64

```python
# Pass a list of column names 注意是双括号
df[['W','Z']]
```
|      | W         | Z         |
| ---- | :-------- | --------- |
| A    | 2.706850  | 0.503826  |
| B    | 0.651118  | 0.605965  |
| C    | -2.018168 | -0.589001 |
| D    | 0.188695  | 0.955057  |
| E    | 0.190794  | 0.683509  |

用SQL语法（不推荐）

```python
df.W
```
    A    2.706850
    B    0.651118
    C   -2.018168
    D    0.188695
    E    0.190794
    Name: W, dtype: float64

DataFrame 的 Columns 就是 Series (DataFrame Columns are just Series)

```python
type(df['W'])
```
output:
    pandas.core.series.Series
### 增加列
```python
df['new'] = df['W'] + df['Y']
```
```python
df
```
output：
|      | W         | X         | Y         | Z         | new       |
| ---- | --------- | --------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  | 3.614819  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  | -0.196959 |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 | -1.489355 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  | -0.744542 |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  | 2.796762  |

### 移除列

```python
df.drop('new',axis=1) #axis=1指的是列，axis=0指行，axis=2指二维表，以此类推
```
output：
|      | W         | X         | Y         | Z         |
| ---- | --------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  |

注意：inplace参数默认为false，即是否替换原数据。上一个drop没有设置inplace参数，所以df的数据，没有改变
```python
df
```
output：
|      | W         | X         | Y         | Z         | new       |
| ---- | --------- | --------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  | 3.614819  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  | -0.196959 |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 | -1.489355 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  | -0.744542 |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  | 2.796762  |

现在我们设置inplace参数
```python
df.drop('new',axis=1,inplace=True)

df
```
output：
|      | W         | X         | Y         | Z         |
| ---- | --------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  |

同样可以删除行
```python
df.drop('E',axis=0)
```
output：
|      | W         | X         | Y         | Z         |
| ---- | --------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  |

### 选择行

```python
df.loc['A']  # 选择行必须要用loc或者iloc函数
```
output：
    W    2.706850
    X    0.628133
    Y    0.907969
    Z    0.503826
    Name: A, dtype: float64

或者用位置代替index
```python
df.iloc[2]
```
output：
    W   -2.018168
    X    0.740122
    Y    0.528813
    Z   -0.589001
    Name: C, dtype: float64

### 选择子集

```python
df.loc['B','Y']
```
output：
    -0.84807698340363147
注意啊，如果直接用 **df['B','Y']** 会报错，用 **df['Y','B']** 也会报错。所以必须用df.loc['B','Y']

```python
df.loc[['A','B'],['W','Y']]
```
OUTPUT:
|      | W        | Y         |
| ---- | -------- | --------- |
| A    | 2.706850 | 0.907969  |
| B    | 0.651118 | -0.848077 |
```python
df.loc[['B','X','A','Y']]
```
    B    0.190915
    X         NaN
    A   -0.747158
    Y         NaN
    Name: Y, dtype: float64


### 情况比较选择（Conditional Selection）

一个很重要的功能，很像numpy的一个功能:


```python
df
```
output：
|      | W         | X         | Y         | Z         |
| ---- | --------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  |

```python
df>0
```
output：
|      | W     | X     | Y     | Z     |
| ---- | ----- | ----- | ----- | ----- |
| A    | True  | True  | True  | True  |
| B    | True  | False | False | True  |
| C    | False | True  | True  | False |
| D    | True  | False | False | True  |
| E    | True  | True  | True  | True  |

```python
df[df>0]
```
output：
|      | W        | X        | Y        | Z        |
| ---- | -------- | -------- | -------- | -------- |
| A    | 2.706850 | 0.628133 | 0.907969 | 0.503826 |
| B    | 0.651118 | NaN      | NaN      | 0.605965 |
| C    | NaN      | 0.740122 | 0.528813 | NaN      |
| D    | 0.188695 | NaN      | NaN      | 0.955057 |
| E    | 0.190794 | 1.978757 | 2.605967 | 0.683509 |

```python
# 注意，在上一个情况中为false的值会用NaN占位（当然以后我们在机器学习中可以用其他数值替换NaN），但是在这个情况中，为false的值直接不显示
df[df['W']>0]
```
|      | W        | X         | Y         | Z        |
| ---- | -------- | --------- | --------- | -------- |
| A    | 2.706850 | 0.628133  | 0.907969  | 0.503826 |
| B    | 0.651118 | -0.319318 | -0.848077 | 0.605965 |
| D    | 0.188695 | -0.758872 | -0.933237 | 0.955057 |
| E    | 0.190794 | 1.978757  | 2.605967  | 0.683509 |

```python
df[df['W']>0]['Y']
```
output：
    A    0.907969
    B   -0.848077
    D   -0.933237
    E    2.605967
    Name: Y, dtype: float64

```python
df[df['W']>0][['Y','X']]
# 注意啦！注意啦！此处是两个双中括号的并列关系，前面一个设定条件，后面一个设置需要选择的范围
```
output：
|      | Y         | X         |
| ---- | --------- | --------- |
| A    | 0.907969  | 0.628133  |
| B    | -0.848077 | -0.319318 |
| D    | -0.933237 | -0.758872 |
| E    | 2.605967  | 1.978757  |

当有两个或两个以上条件时，需要用 | 或者 & 连接

```python
df[(df['W']>0) & (df['Y'] > 1)]
```
output：
|      | W        | X        | Y        | Z        |
| ---- | -------- | -------- | -------- | -------- |
| E    | 0.190794 | 1.978757 | 2.605967 | 0.683509 |

更多index细节
让我们来看看更多index的使用情况
```python
df
```
output：
|      | W         | X         | Y         | Z         | new       |
| ---- | --------- | --------- | --------- | --------- | --------- |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  | 3.614819  |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  | -0.196959 |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 | -1.489355 |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  | -0.744542 |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  | 2.796762  |

```python
# 将index重置为 0,1...n
df.reset_index()
# 会有inplace参数 和fillin参数可以重置index
```
|      | index | W         | X         | Y         | Z         |
| ---- | ----- | --------- | --------- | --------- | --------- |
| 0    | A     | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| 1    | B     | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| 2    | C     | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| 3    | D     | 0.188695  | -0.758872 | -0.933237 | 0.955057  |
| 4    | E     | 0.190794  | 1.978757  | 2.605967  | 0.683509  |

```python
newind = 'CA NY WY OR CO'.split()
```
```python
df['States'] = newind

df # 增加新的一列
```
output：
|      | W         | X         | Y         | Z         | States |
| ---- | --------- | --------- | --------- | --------- | ------ |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  | CA     |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  | NY     |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 | WY     |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  | OR     |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  | CO     |

```python
df.set_index('States')
```
output：
|        | W         | X         | Y         | Z         |
| ------ | --------- | --------- | --------- | --------- |
| States |           |           |           |           |
| CA     | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| NY     | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| WY     | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| OR     | 0.188695  | -0.758872 | -0.933237 | 0.955057  |
| CO     | 0.190794  | 1.978757  | 2.605967  | 0.683509  |

```python
df
```
output：
|      | W         | X         | Y         | Z         | States |
| ---- | --------- | --------- | --------- | --------- | ------ |
| A    | 2.706850  | 0.628133  | 0.907969  | 0.503826  | CA     |
| B    | 0.651118  | -0.319318 | -0.848077 | 0.605965  | NY     |
| C    | -2.018168 | 0.740122  | 0.528813  | -0.589001 | WY     |
| D    | 0.188695  | -0.758872 | -0.933237 | 0.955057  | OR     |
| E    | 0.190794  | 1.978757  | 2.605967  | 0.683509  | CO     |
```python
df.set_index('States',inplace=True)
# 由此可见inplace参数将影响到原数据
df
```
output：
|        | W         | X         | Y         | Z         |
| ------ | --------- | --------- | --------- | --------- |
| States |           |           |           |           |
| CA     | 2.706850  | 0.628133  | 0.907969  | 0.503826  |
| NY     | 0.651118  | -0.319318 | -0.848077 | 0.605965  |
| WY     | -2.018168 | 0.740122  | 0.528813  | -0.589001 |
| OR     | 0.188695  | -0.758872 | -0.933237 | 0.955057  |
| CO     | 0.190794  | 1.978757  | 2.605967  | 0.683509  |

### 复合index和index阶层

复合index 需要将index做成一个tuple

```python
# Index Levels
outside = ['G1','G1','G1','G2','G2','G2']
inside = [1,2,3,1,2,3]
hier_index = list(zip(outside,inside))
hier_index = pd.MultiIndex.from_tuples(hier_index)
```
```python
hier_index
```
    MultiIndex(levels=[['G1', 'G2'], [1, 2, 3]],
               labels=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])

```python
df = pd.DataFrame(np.random.randn(6,2),index=hier_index,columns=['A','B'])
df
```
output:

|       |      | A         | B         |
| ----- | ---- | --------- | --------- |
| Group | Num  |           |           |
|       | 1    | 0.153661  | 0.167638  |
| G1    | 2    | -0.765930 | 0.962299  |
|       | 3    | 0.902826  | -0.537909 |
|       | 1    | -1.549671 | 0.435253  |
| G2    | 2    | 1.259904  | -0.447898 |
|       | 3    | 0.266207  | 0.412580  |

利用xs函数返回dataframe的 cross-section子集
```python
df.xs('G1')
```
output:

|      | A         | B         |
| ---- | --------- | --------- |
| Num  |           |           |
| 1    | 0.153661  | 0.167638  |
| 2    | -0.765930 | 0.962299  |
| 3    | 0.902826  | -0.537909 |


```python
df.xs(['G1',1])
```

    A    0.153661
    B    0.167638
    Name: (G1, 1), dtype: float64

```python
df.xs(1,level='Num')
```
output：
|       | A         | B        |
| ----- | --------- | -------- |
| Group |           |          |
| G1    | 0.153661  | 0.167638 |
| G2    | -1.549671 | 0.435253 |



# Missing Data（无效数据）

Pandas有几种方法来处理无效的数据